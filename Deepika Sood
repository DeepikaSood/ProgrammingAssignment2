#Make function for caching inverse of a matrix

#makeCacheMatrix is matrix object
#if the matrix inverse is already been calculated then the function will find it in cache and returns it until next matrix is defined


makeCacheMatrix <- function(x=matrix()){
        inv <-NULL
        set <- function(y) {
                x<<-y
                inv <<-NULL
        }
        
        get <- function() x
                setinverse <- function(inverse) inv <<- inverse

        getinverse <-function() inv
        
        list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
        
}

#function to calculate inverse of matrix returned by makeCacheMatrix

cacheSolve <- function(x, ...) {
        inv <- x$getinverse()
        if(!is.null(inv)) {
                message("getting cached data.")
                return(inv)
        }
        data <- x$get()
        inv <- solve(data)
        x$setinverse(inv)
        inv
}

